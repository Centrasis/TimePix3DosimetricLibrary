cmake_minimum_required (VERSION 3.9)
PROJECT(libkatherinetimepix C CXX)
file(GLOB_RECURSE KATHERINETPX_SOURCES FILES_MATCHING PATTERN "src/*.cpp")
file(GLOB_RECURSE KATHERINETPX_CL_SOURCES FILES_MATCHING PATTERN "src/opencl/*.cl")
file(GLOB_RECURSE KATHERINETPX_CL_HEADER FILES_MATCHING PATTERN "src/opencl/*.clh")
file(GLOB_RECURSE KATHERINETPX_HEADERS FILES_MATCHING PATTERN "include/*.h")

SET(local_TPX_INCLUDES ${KATHERINETPX_HEADERS})
SET(local_TPX_LIBS_DBG "")
SET(local_TPX_LIBS_REL "")

get_directory_property(hasParent PARENT_DIRECTORY)

option(USE_SYCL "use SYCL (else use OpenCL only)" OFF)
option(USE_OpenCL "should OpenCL support should be enabled" ON)
option(USE_LibKatherine "use the real divice hardware or simulate it" OFF)
option(USE_CompiletimeRessources "use OpenCL files or compile the files into the binary" OFF)
option(USE_OpenGL "use OpenGL to accelerate the integration" OFF)
option(USE_KATHERINE "use the katherine file format (simulation only)" ON)
option(USE_ADVACAM "use the ADVACAM file format (simulation only). If turned off the katherine format is assumed." OFF)
option(DO_STATISTICS "Define if the library should log algorithm statistics while executing" OFF)

find_package( OpenCV REQUIRED PATHS "C:/OpenCV" "C:/Program Files (x86)/OpenCV" )

SET(OpenCV_LIBS_DBG ${OpenCV_LIBS})
SET(OpenCV_LIBS_REL ${OpenCV_LIBS})
list(APPEND local_TPX_LIBS_DBG ${OpenCV_LIBS_DBG})
list(APPEND local_TPX_LIBS_REL ${OpenCV_LIBS_REL})
message(STATUS "Found OpenCV include Dir from env: ${OpenCV_INCLUDE_DIRS}")

if(NOT UNIX)
   add_compile_definitions(WIN32)
endif()

if(${DO_STATISTICS} MATCHES ON)
   add_compile_definitions(_DO_ALOGRITHM_STATISTICS_)
   list(APPEND compiler_defs _DO_ALOGRITHM_STATISTICS_)
endif()

if(${USE_OpenCL} MATCHES ON)
	if(hasParent)
		SET(USE_OpenCL ON PARENT_SCOPE)
	endif()
	if(${USE_SYCL} MATCHES ON)
		if(hasParent)
			SET(USE_SYCL ON PARENT_SCOPE)
		endif()
		message("Use SYCL from ComputeCPP")
		if (DEFINED ENV{COMPUTECPP_ROOT_DIR})
		SET(SYCL_INCLUDE_DIRECTORY "$ENV{COMPUTECPP_ROOT_DIR}/include")
		SET(SYCL_LIB "$ENV{COMPUTECPP_ROOT_DIR}/lib/ComputeCpp_vs2015.lib")
		message("Found ComputeCPP include Dir from env: ${SYCL_INCLUDE_DIRECTORY}")
		else()
		#find_package(ComputeCpp REQUIRED)
		SET(SYCL_INCLUDE_DIRECTORY "D:/Program Files/Codeplay/ComputeCpp/include")
		SET(SYCL_LIB "D:/Program Files/Codeplay/ComputeCpp/lib/ComputeCpp_vs2015.lib")
		endif()
		
		SET(ComputeSDK ${local_TPX_BASE_PATH}/../CodeCPP_SDK)
		message("Search ComputeSDK at: ${ComputeSDK}/cmake/Modules")
		list(APPEND CMAKE_MODULE_PATH "${ComputeSDK}/cmake/Modules")
		if(${ComputeCpp_DIR} MATCHES "ComputeCpp_DIR-NOTFOUND")
		message("Search ComputeCPP not found! Trying manual set!")
		SET(ComputeCpp_DIR $ENV{COMPUTECPP_ROOT_DIR})
		endif()
		SET(DCOMPUTECPP_BITCODE, "spir64")
		find_package(ComputeCpp REQUIRED)
		SET(DCOMPUTECPP_BITCODE, "spir64")
		add_compile_definitions(__USE_SYCL__)
		list(APPEND compiler_defs __USE_SYCL__)
	else()
		if(hasParent)
			SET(USE_SYCL OFF PARENT_SCOPE)
		endif()
		message(STATUS "Use OpenCL only")
		find_package( OpenCL REQUIRED )
		set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/")
		SET(SYCL_INCLUDE_DIRECTORY ${OpenCL_INCLUDE_DIRS})
		SET(OpenCL_LIBRARY ${OpenCL_LIBRARIES})
		SET(SYCL_LIB ${OpenCL_LIBRARIES})
		if ("${SYCL_LIB}" STREQUAL "")
			message("ERROR: OpenCL vendor lib not found!")
		endif()
		message(STATUS "Link OpenCL vendor lib:${SYCL_LIB}")
		message(STATUS "Use OpenCL includes:${SYCL_INCLUDE_DIRECTORY}")
	endif()
	
	list(APPEND local_TPX_LIBS_DBG ${SYCL_LIB})
	list(APPEND local_TPX_LIBS_REL ${SYCL_LIB})
	list(APPEND local_TPX_INCLUDES ${SYCL_INCLUDE_DIRECTORY})
	
	add_compile_definitions(__USE_OPENCL__)
	list(APPEND compiler_defs __USE_OPENCL__)
	if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../OCLDaMa/CMakeLists.txt")
  		add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/../OCLDaMa" "${CMAKE_CURRENT_SOURCE_DIR}/../OCLDaMa/build")
	 else()
	 	SET(OCL_DAMA_PATH "" PATH)
		message(WARNING "No cmake for OCL DaMa found please build it in a subfolder named 'build' (Default is: ${CMAKE_CURRENT_SOURCE_DIR}/../OCLDaMa)! Continue with library only usage or define it manually")
		add_subdirectory("${OCL_DAMA_PATH}" "${OCL_DAMA_PATH}/build")
  	endif()
endif()

if(${USE_OpenGL} MATCHES ON)
	if(hasParent)
		SET(USE_OpenGL ON PARENT_SCOPE)
	endif()
	find_package(OpenGL REQUIRED)
	if(${OPENGL_FOUND})
	  message(STATUS "Found OpenGL includes: ${OPENGL_INCLUDE_DIR}")
	  if(${OpenGL_OpenGL_FOUND})
		   message(STATUS "Found OpenGL lib: ${OPENGL_LIBRARIES}")
	  endif()
	else()
	   if(${OpenGL_OpenGL_FOUND})
		   message(STATUS "Found OpenGL lib: ${OPENGL_LIBRARIES}")
	   endif()
	endif()

	find_package(glfw3 REQUIRED)
	
	list(APPEND local_TPX_LIBS_DBG ${OPENGL_LIBRARIES})
	list(APPEND local_TPX_LIBS_REL ${OPENGL_LIBRARIES})
	list(APPEND local_TPX_LIBS_REL glfw)	
	list(APPEND local_TPX_LIBS_DBG glfw)
	
	add_compile_definitions(__USE_OPENGL__)
	list(APPEND compiler_defs __USE_OPENGL__)
endif()

if(${USE_LibKatherine} MATCHES OFF)
   message(STATUS "Simulate device")
   add_compile_definitions(__SIMULATION__)
   list(APPEND compiler_defs __SIMULATION__)
   if(hasParent)
      SET(USE_LibKatherine OFF PARENT_SCOPE)
   endif()
else()
  message(STATUS "Use LibKatherine")
  if(hasParent)
	  SET(USE_LibKatherine ON PARENT_SCOPE)
  endif()
  if((EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../katherine/CMakeLists.txt") AND (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../katherine/build"))
	SET(KATHERINE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../katherine" PATH)
	message(STATUS "Found katherine: ${CMAKE_CURRENT_SOURCE_DIR}/../katherine")
  else()
    SET(KATHERINE_PATH "" PATH)
	message(WARNING "No cmake for katherine found please build it in a subfolder named 'build' (Default is: ../katherine)! Continue with library only usage or define it manually")
  endif()
  add_subdirectory("${KATHERINE_PATH}" "${KATHERINE_PATH}/build")
  list(APPEND local_TPX_INCLUDES "${KATHERINE_PATH}/cxx/include")
  list(APPEND local_TPX_LIBS_REL "${KATHERINE_PATH}/build/Release/katherine.dll")	
  list(APPEND local_TPX_LIBS_DBG "${KATHERINE_PATH}/build/Debug/katherine.dll")
endif()

if(${USE_KATHERINE} MATCHES ON)
	if(${USE_LibKatherine} MATCHES OFF)
		add_compile_definitions(__USE_KATHERINE__)
		if(hasParent)
			SET(USE_KATHERINE ON PARENT_SCOPE)
		endif()
	endif()
else()
   if(hasParent)
	  SET(USE_KATHERINE OFF PARENT_SCOPE)
   endif()
endif()

if(${USE_ADVACAM} MATCHES ON)
	if(${USE_LibKatherine} MATCHES OFF)
	    if(USE_KATHERINE MATCHES ON)
		    message("YOU CAN ONLY USE ADVACAM OR KATHERINE NOT BOTH!")
		else()
			add_compile_definitions(__USE_ADVACAM__)
			if(hasParent)
				SET(USE_ADVACAM ON PARENT_SCOPE)
			endif()
		endif()
	endif()
else()
	if(hasParent)
		SET(USE_ADVACAM OFF PARENT_SCOPE)
	endif()
endif()

if(${USE_ADVACAM} MATCHES OFF)
   if(${USE_KATHERINE} MATCHES OFF)
		message("YOU NEED TO SET either ADVACAM OR KATHERINE USAGE FOR SIMULATION!")
	endif()
endif()

if(UNIX)
  set (CMAKE_CXX_FLAGS "-std=c++17") 
  set (CMAKE_C_FLAGS "-std=c17")
  if(hasParent)
  	SET(CMAKE_CXX_FLAGS "-std:c++17" PARENT_SCOPE)
	SET(CMAKE_C_FLAGS "-std:c17" PARENT_SCOPE)
  endif()	
else()
  set (CMAKE_CXX_FLAGS "/std:c++17 /EHsc /MP") 
  set (CMAKE_C_FLAGS "/std:c17 /EHsc /MP")
  if(hasParent)
    SET(CMAKE_CXX_FLAGS "/std:c++17 /EHsc /MP" PARENT_SCOPE)
	SET(CMAKE_C_FLAGS "/std:c17 /EHsc /MP" PARENT_SCOPE)
  endif()

  #set(CMAKE_CXX_FLAGS_RELEASE "/MT")
  #set(CMAKE_CXX_FLAGS_DEBUG "/MTd")
  if(hasParent)
    #set(CMAKE_CXX_FLAGS_RELEASE "/MT" PARENT_SCOPE)
	#set(CMAKE_CXX_FLAGS_DEBUG "/MTd" PARENT_SCOPE)
  endif()
endif()

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ../lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ../lib)
link_directories(${KATHERINElocal_TPX_LIBS_DIR})

add_library(katherinetimepix ${KATHERINETPX_SOURCES} ${KATHERINETPX_HEADERS} ${KATHERINETPX_CL_SOURCES})
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
source_group("opencl" FILES ${KATHERINETPX_CL_SOURCES})
source_group("include" FILES ${KATHERINETPX_HEADERS})
source_group("src" FILES ${KATHERINETPX_SOURCES})
source_group("shared" FILES ${SHARED_HEADERS})
source_group("opencl" REGULAR_EXPRESSION "[\\w*\\.cl]+")
source_group("opencl/include" FILES ${KATHERINETPX_CL_HEADER})
source_group("opencl/include" REGULAR_EXPRESSION "[\\w*\\.clh]+")

target_link_libraries(katherinetimepix debug ${local_TPX_LIBS_DBG})
target_link_libraries(katherinetimepix optimized local_TPX_LIBS_REL)
if(${USE_SYCL} MATCHES ON)
   add_sycl_to_target(TARGET katherinetimepix SOURCES ${KATHERINETPX_SOURCES})
endif()

if(${USE_CompiletimeRessources} MATCHES ON)
    
	message(STATUS "Enabling OpenCL RC..")
	if(EXISTS "${PROJECT_SOURCE_DIR}/../OCLDaMa/OCL_RC/Debug/OCL_RC.exe")
		add_custom_command(TARGET katherinetimepix PRE_BUILD COMMAND "${PROJECT_SOURCE_DIR}/../OCLDaMa/OCL_RC/Debug/OCL_RC.exe" "${PROJECT_SOURCE_DIR}/src/opencl" "${PROJECT_SOURCE_DIR}/../OCLDaMa/includes")
		message(STATUS "OpenCL RC at ${PROJECT_SOURCE_DIR}/../OCLDaMa/OCL_RC/Debug/OCL_RC.exe was registered")
		add_compile_definitions(__USE_COMPILETIMERESSOURCES__)
		list(APPEND compiler_defs __USE_COMPILETIMERESSOURCES__)
	else()
		message(WARNING "OpenCL RC at ${PROJECT_SOURCE_DIR}/../OCLDaMa/OCL_RC/Debug/OCL_RC.exe was NOT registered!")
	endif()
endif()

list(APPEND local_TPX_INCLUDES "${PROJECT_SOURCE_DIR}/../OCLDaMa/includes")
list(APPEND local_TPX_LIBS_REL "${PROJECT_SOURCE_DIR}/../OCLDaMa/lib/Release/oclDAMA.lib")	
list(APPEND local_TPX_LIBS_DBG "${PROJECT_SOURCE_DIR}/../OCLDaMa/lib/Debug/oclDAMA.lib")

if(${USE_OpenGL} MATCHES ON)
  list(APPEND local_TPX_INCLUDES include)
  list(APPEND local_TPX_INCLUDES ${OPENGL_INCLUDE_DIR})
  list(APPEND local_TPX_INCLUDES ${PROJECT_SOURCE_DIR}/../katherine/include)
  list(APPEND local_TPX_INCLUDES ${GLFW_DIR}/include)
  list(APPEND local_TPX_INCLUDES ${PROJECT_SOURCE_DIR}/../GLEW/include)
  list(APPEND local_TPX_INCLUDES ${SYCL_INCLUDE_DIRECTORY})
  list(APPEND local_TPX_INCLUDES ${OpenCV_INCLUDE_DIRS})
else()
  list(APPEND local_TPX_INCLUDES include)
  list(APPEND local_TPX_INCLUDES ${PROJECT_SOURCE_DIR}/../katherine/include)
  list(APPEND local_TPX_INCLUDES ${PROJECT_SOURCE_DIR}/../GLEW/include)
  list(APPEND local_TPX_INCLUDES ${SYCL_INCLUDE_DIRECTORY})
  list(APPEND local_TPX_INCLUDES ${OpenCV_INCLUDE_DIRS})
endif()

target_include_directories(katherinetimepix PUBLIC ${local_TPX_INCLUDES})

if(hasParent)
	SET(TPX_INCLUDES ${local_TPX_INCLUDES} PARENT_SCOPE)
	SET(TPX_LIBS_DBG ${local_TPX_LIBS_DBG} PARENT_SCOPE)
	SET(TPX_LIBS_REL ${local_TPX_LIBS_REL} PARENT_SCOPE)
	SET(TPX_BASE_PATH $ENV{TpxProcLib_Root} PARENT_SCOPE)
	SET(TPX_COMPILER_DEFINITIONS ${compiler_defs} PARENT_SCOPE)
endif()
target_compile_definitions(katherinetimepix PUBLIC ${compiler_defs})